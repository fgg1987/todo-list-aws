pipeline {
    agent any

     stages {
         
        stage('Get Code') {
            steps {
                // Obtener cÃ³digo del repo
                git branch: 'develop', url: 'https://github.com/fgg1987/todo-list-aws.git'
            }
        }
        
        stage('Prepare environment') {
            steps {
                    // Creates the python virtualenv
                    sh 'bash ./pipelines/PIPELINE-FULL-STAGING/setup.sh'
            }
        }
        
        stage('Static Test') {
            steps {
                sh '''
                    export PYTHONPATH=$(pwd)
                    . todo-list-aws/bin/activate
                    flake8 --exit-zero --format = pylint src/*.py > flake8.out
                    
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
            }
        }
            
        stage('Security') {
          steps {
              sh '''
                  export PYTHONPATH=$(pwd)
                  . todo-list-aws/bin/activate
                  bandit --exit-zero -r src/*.py -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id} {msg}]"
              '''
              recordIssues tools:
                  [
                  pyLint(name: 'Bandit', pattern: 'bandit.out')],
                  qualityGates: [
                      [threshold: 1, type: 'TOTAL', unstable: true], 
                      [threshold: 2, type: 'TOTAL', unstable: false]
                  ]
            }
        }
        
       stage('SAM Build') {
            steps{
                echo 'Package sam application:'
                sh "bash pipelines/common-steps/build.sh"
            }
        }

        stage('SAM Deploy'){
            steps{
                echo 'Initiating Deployment'
                sh '''
                set -x
                du -hs * | sort -h
                        sam deploy \\
                            --force-upload \\
                            --stack-name todo-list-aws-staging \\
                            --region us-east-1 \\
                            --config-env staging \\
                            --no-fail-on-empty-changeset \\
                            --capabilities CAPABILITY_IAM \\
                            --no-confirm-changeset \\
                '''
            }
        }
        
        stage('Integration Tests'){
            steps{
                withPythonEnv('/usr/bin/python3') {
                    script {
                        def BASE_URL = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text", returnStdout: true).trim()
                        echo 'Initiating Integration Tests'
                        
                        // Ejecutar pytest de Python
                        sh """
                            . todo-list-aws/bin/activate
                            export BASE_URL=$BASE_URL
                            pytest -s test/integration/todoApiTest.py
                        """
                    }
                }
            }
        }
        
        stage('Promote') {
            steps {
                withPythonEnv('/usr/bin/python3') {
                    script {
                        git url: 'https://fgg1987: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@github.com/fgg1987/todo-list-aws.git'
                        sh 'git add .'
                        def status = sh(script: 'git status --porcelain', returnStatus: true)
                        echo 'Resultado::'
                        println status
                        if (status != 0) {
                            sh 'git commit -m "Codigo valido subiendo cambios"'
                            sh 'git push -u origin develop' // Push y establecer la rama de seguimiento
                            sh 'git checkout master'  // Cambiar a la rama master
                            sh 'git merge develop' // Hacer un merge de la rama develop en la rama master
                            sh 'git push' // Subir los cambios a la rama master remota
                        } else {
                            echo 'No hay cambios para confirmar. Continuando sin hacer commit.'
                        }
                    }
                }
            }
        }
    }
}
